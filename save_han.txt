#include "stack.h"

/**
 * handler - handle the instructions
 * @head: double pointer to the stack
 * @lines: array of strings containing the instructions
 * @num_lines: number of instructions
 *
 * Return: 0 (success)
 */
int handlerx(stack_t **head, char **lines, int num_lines)
{
    char *action = NULL;
    char *value_str = NULL;
    int value = -1;
    int i = 0;
    int j = 0;
    int k = 0;
    int values[num_lines];
    char *ops[num_lines];

    for (i = 0; i < num_lines; i++)
    {
        action = strtok(lines[i], " ");
        if (action != NULL)
        {
            value_str = strtok(NULL, " ");
            if (value_str != NULL)
            {
                value = atoi(value_str);
            }
            else
            {
                value = 0;
            }
        }
        else
        {
            value = 0;
        }

        values[i] = value;
        ops[i] = strdup(action);
    }

    instruction_t in[] = {
        {"push", (void (*)(stack_t **, unsigned int))push},
        {"pall", (void (*)(stack_t **, unsigned int))pall},
        {NULL, NULL},
    };

    while (j < num_lines)
    {
        while (in[k].opcode)
        {
            if (strcmp(in[k].opcode, ops[j]) == 0)
            {
                in[k].f(head, values[j]);
                break;
            }
            k++;
        }
        j++;
    }

    for (i = 0; i < num_lines; i++)
    {
        free(lines[i]);
    }
    free(lines);

    for (i = 0; i < num_lines; i++)
    {
        free(ops[i]);
    }

    return 0;
}
